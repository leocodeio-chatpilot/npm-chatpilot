{"version":3,"file":"index.mjs","sources":["../src/index.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { SiChatbot } from \"react-icons/si\";\r\nimport { GiCrossedBones } from \"react-icons/gi\";\r\nimport { IoSendSharp } from \"react-icons/io5\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { toast, Toaster } from \"react-hot-toast\";\r\nimport './styles.css';\r\n\r\nexport const Capitalize = ({ str }: { str: string }) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n\r\ninterface Message {\r\n  role: string;\r\n  content: string;\r\n}\r\n\r\nexport const ChatPilotBot = ({ \r\n  apiKey,\r\n  apiUrl = \"https://api.chatpilot.com\" \r\n}: { \r\n  apiKey: string;\r\n  apiUrl?: string;\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n\r\n    const newMessage = { role: \"user\", content: inputMessage };\r\n    setMessages([...messages, newMessage]);\r\n    setInputMessage(\"\");\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(`${apiUrl}/prompt`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n        body: JSON.stringify({ messages: [...messages, newMessage] }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to get response\");\r\n\r\n      const data = await response.json();\r\n      setMessages((prev) => [...prev, { role: \"assistant\", content: data.response }]);\r\n    } catch (error) {\r\n      toast.error(\"Failed to get response\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatpilot-fixed chatpilot-bottom-4 chatpilot-right-4\">\r\n      <Toaster position=\"top-right\" />\r\n      {isOpen ? (\r\n        <div className=\"chatpilot-container\">\r\n          <div className=\"chatpilot-header\">\r\n            <div className=\"chatpilot-flex chatpilot-items-center chatpilot-gap-2\">\r\n              <SiChatbot className=\"chatpilot-w-6 chatpilot-h-6\" />\r\n              <span className=\"chatpilot-font-semibold\">ChatPilot</span>\r\n            </div>\r\n            <button \r\n              onClick={() => setIsOpen(false)}\r\n              className=\"chatpilot-p-2 chatpilot-rounded-full hover:chatpilot-bg-gray-100\"\r\n            >\r\n              <GiCrossedBones className=\"chatpilot-w-5 chatpilot-h-5\" />\r\n            </button>\r\n          </div>\r\n          \r\n          <div className=\"chatpilot-h-96 chatpilot-overflow-y-auto chatpilot-p-4\">\r\n            {messages.map((message, index) => (\r\n              <div\r\n                key={index}\r\n                className={`chatpilot-mb-4 chatpilot-flex ${\r\n                  message.role === \"user\" ? \"chatpilot-justify-end\" : \"chatpilot-justify-start\"\r\n                }`}\r\n              >\r\n                <div\r\n                  className={`chatpilot-max-w-[80%] chatpilot-rounded-lg chatpilot-p-3 ${\r\n                    message.role === \"user\"\r\n                      ? \"chatpilot-bg-blue-500 chatpilot-text-white\"\r\n                      : \"chatpilot-bg-gray-200\"\r\n                  }`}\r\n                >\r\n                  {message.content}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {isLoading && (\r\n              <div className=\"chatpilot-flex chatpilot-justify-start chatpilot-mb-4\">\r\n                <div className=\"chatpilot-bg-gray-200 chatpilot-rounded-lg chatpilot-p-3\">\r\n                  Typing...\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          <form onSubmit={handleSendMessage} className=\"chatpilot-p-4 chatpilot-border-t\">\r\n            <div className=\"chatpilot-flex chatpilot-gap-2\">\r\n              <input\r\n                type=\"text\"\r\n                value={inputMessage}\r\n                onChange={(e) => setInputMessage(e.target.value)}\r\n                placeholder=\"Type your message...\"\r\n                className=\"chatpilot-flex-1 chatpilot-rounded-lg chatpilot-border chatpilot-p-2 chatpilot-focus:outline-none chatpilot-focus:ring-2 chatpilot-focus:ring-blue-500\"\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n                className=\"chatpilot-bg-blue-500 chatpilot-text-white chatpilot-p-2 chatpilot-rounded-lg hover:chatpilot-bg-blue-600 chatpilot-transition-colors disabled:chatpilot-opacity-50\"\r\n              >\r\n                <IoSendSharp className=\"chatpilot-w-5 chatpilot-h-5\" />\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      ) : (\r\n        <button\r\n          onClick={() => setIsOpen(true)}\r\n          className=\"chatpilot-bg-blue-500 chatpilot-text-white chatpilot-p-4 chatpilot-rounded-full hover:chatpilot-bg-blue-600 chatpilot-transition-colors\"\r\n        >\r\n          <SiChatbot className=\"chatpilot-w-6 chatpilot-h-6\" />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":["Capitalize","str","charAt","toUpperCase","slice","ChatPilotBot","apiKey","apiUrl","isOpen","setIsOpen","useState","messages","setMessages","inputMessage","setInputMessage","isLoading","setIsLoading","messagesEndRef","useRef","useEffect","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","React","createElement","className","Toaster","position","SiChatbot","onClick","GiCrossedBones","map","message","index","key","role","content","ref","onSubmit","async","e","preventDefault","trim","newMessage","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","data","json","prev","error","toast","type","value","onChange","target","placeholder","disabled","IoSendSharp"],"mappings":"kRAQa,MAAAA,EAAaA,EAAGC,SACpBA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GAQpCC,EAAeA,EAC1BC,SACAC,OAAAA,EAAS,gCAKT,MAAOC,EAAQC,GAAaC,GAAS,IAC9BC,EAAUC,GAAeF,EAAoB,KAC7CG,EAAcC,GAAmBJ,EAAS,KAC1CK,EAAWC,GAAgBN,GAAS,GACrCO,EAAiBC,EAAuB,MAwC9C,OAlCAC,EAAU,KAJaC,IAAKC,EAC1BA,OAAAA,EAAAJ,EAAeK,UAAfD,EAAwBE,eAAe,CAAEC,SAAU,UAIrC,EACb,CAACb,IAiCFc,EAAAC,cAAA,MAAA,CAAKC,UAAU,wDACbF,EAAAC,cAACE,EAAO,CAACC,SAAS,cACjBrB,EACCiB,EAAKC,cAAA,MAAA,CAAAC,UAAU,uBACbF,EAAKC,cAAA,MAAA,CAAAC,UAAU,oBACbF,EAAKC,cAAA,MAAA,CAAAC,UAAU,yDACbF,EAAAC,cAACI,EAAS,CAACH,UAAU,gCACrBF,EAAAC,cAAA,OAAA,CAAMC,UAAU,2BAAyB,cAE3CF,EAAAC,cAAA,SAAA,CACEK,QAASA,IAAMtB,GAAU,GACzBkB,UAAU,oEAEVF,EAAAC,cAACM,EAAe,CAAAL,UAAU,kCAI9BF,EAAKC,cAAA,MAAA,CAAAC,UAAU,0DACZhB,EAASsB,IAAI,CAACC,EAASC,IACtBV,EACEC,cAAA,MAAA,CAAAU,IAAKD,EACLR,UAAW,kCACQ,SAAjBO,EAAQG,KAAkB,wBAA0B,4BAGtDZ,EAAAC,cAAA,MAAA,CACEC,UAAW,6DACQ,SAAjBO,EAAQG,KACJ,6CACA,0BAGLH,EAAQI,WAIdvB,GACCU,EAAKC,cAAA,MAAA,CAAAC,UAAU,yDACbF,EAAAC,cAAA,MAAA,CAAKC,UAAU,4DAA0D,cAK7EF,EAAAC,cAAA,MAAA,CAAKa,IAAKtB,KAGZQ,EAAAC,cAAA,OAAA,CAAMc,SA7EYC,UAExB,GADAC,EAAEC,kBACG9B,EAAa+B,OAAQ,OAE1B,MAAMC,EAAa,CAAER,KAAM,OAAQC,QAASzB,GAC5CD,EAAY,IAAID,EAAUkC,IAC1B/B,EAAgB,IAChBE,GAAa,GAEb,IACE,MAAM8B,QAAiBC,MAAM,GAAGxC,WAAiB,CAC/CyC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAU5C,KAE3B6C,KAAMC,KAAKC,UAAU,CAAE1C,SAAU,IAAIA,EAAUkC,OAGjD,IAAKC,EAASQ,GAAI,MAAU,IAAAC,MAAM,0BAElC,MAAMC,QAAaV,EAASW,OAC5B7C,EAAa8C,GAAS,IAAIA,EAAM,CAAErB,KAAM,YAAaC,QAASkB,EAAKV,WACrE,CAAE,MAAOa,GACPC,EAAMD,MAAM,yBACd,CAAC,QACC3C,GAAa,EACf,GAkDyCW,UAAU,oCAC3CF,EAAKC,cAAA,MAAA,CAAAC,UAAU,kCACbF,EAAAC,cAAA,QAAA,CACEmC,KAAK,OACLC,MAAOjD,EACPkD,SAAWrB,GAAM5B,EAAgB4B,EAAEsB,OAAOF,OAC1CG,YAAY,uBACZtC,UAAU,2JAEZF,EACEC,cAAA,SAAA,CAAAmC,KAAK,SACLK,SAAUnD,EACVY,UAAU,uKAEVF,EAAAC,cAACyC,EAAW,CAACxC,UAAU,oCAM/BF,EAAAC,cAAA,SAAA,CACEK,QAASA,IAAMtB,GAAU,GACzBkB,UAAU,2IAEVF,EAACC,cAAAI,EAAU,CAAAH,UAAU,iCAExB"}