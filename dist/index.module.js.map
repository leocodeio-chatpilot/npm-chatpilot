{"version":3,"file":"index.module.js","sources":["../src/index.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { SiChatbot } from \"react-icons/si\";\r\nimport { GiCrossedBones } from \"react-icons/gi\";\r\nimport { IoSendSharp } from \"react-icons/io5\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { toast, Toaster } from \"react-hot-toast\";\r\n\r\nexport const Capitalize = ({ str }: { str: string }) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n\r\ninterface Message {\r\n  role: string;\r\n  content: string;\r\n}\r\n\r\nexport const ChatPilotBot = ({\r\n  apiKey,\r\n  apiUrl = \"https://api.chatpilot.com\",\r\n  xApiKey,\r\n}: {\r\n  apiKey: string;\r\n  xApiKey: string;\r\n  apiUrl?: string;\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n\r\n    const newMessage = { role: \"user\", content: inputMessage };\r\n    setMessages([...messages, newMessage]);\r\n    setInputMessage(\"\");\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(`${apiUrl}/prompt`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-api-key\": xApiKey,\r\n        },\r\n        body: JSON.stringify({\r\n          queryText: inputMessage,\r\n          apiKey: apiKey,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to get response\");\r\n\r\n      const data = await response.json();\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { role: \"assistant\", content: data.payload.response },\r\n      ]);\r\n    } catch (error) {\r\n      toast.error(\"Failed to get response\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const styles = {\r\n    container: {\r\n      position: \"fixed\",\r\n      bottom: \"2rem\",\r\n      right: \"2rem\",\r\n      zIndex: 50,\r\n    },\r\n    chatContainer: {\r\n      maxWidth: \"25rem\",\r\n      maxHeight: \"35rem\",\r\n      backgroundColor: \"white\",\r\n      borderRadius: \"0.75rem\",\r\n      boxShadow: \"0 4px 6px rgba(0, 0, 0, 0.1)\",\r\n      overflow: \"hidden\",\r\n      zIndex: 50,\r\n    },\r\n    header: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"end\",\r\n      padding: \"0.75rem\",\r\n    },\r\n    closeButton: {\r\n      cursor: \"pointer\",\r\n      transition: \"transform 0.3s ease-in-out\",\r\n      \":hover\": {\r\n        transform: \"scale(1.25)\",\r\n      },\r\n    },\r\n    messagesContainer: {\r\n      height: \"20rem\",\r\n      overflowY: \"auto\",\r\n      padding: \"1rem\",\r\n    },\r\n    messageWrapper: (isUser: boolean) => ({\r\n      marginBottom: \"0.75rem\",\r\n      display: \"flex\",\r\n      justifyContent: isUser ? \"flex-end\" : \"flex-start\",\r\n    }),\r\n    message: (isUser: boolean) => ({\r\n      maxWidth: \"75%\",\r\n      borderRadius: \"1rem\",\r\n      padding: \"0.75rem 1rem\",\r\n      backgroundColor: isUser ? \"#3b82f6\" : \"#f3f4f6\",\r\n      color: isUser ? \"white\" : \"black\",\r\n    }),\r\n    noMessages: {\r\n      textAlign: \"center\",\r\n      color: \"#9ca3af\",\r\n    },\r\n    inputContainer: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      gap: \"0.5rem\",\r\n      padding: \"0.5rem\",\r\n      borderTop: \"1px solid #e5e7eb\",\r\n    },\r\n    input: {\r\n      flexGrow: 1,\r\n      padding: \"0.75rem\",\r\n      borderRadius: \"0.5rem\",\r\n      border: \"1px solid #e5e7eb\",\r\n      outline: \"none\",\r\n      \":focus\": {\r\n        borderColor: \"#3b82f6\",\r\n      },\r\n    },\r\n    sendButton: {\r\n      backgroundColor: \"#3b82f6\",\r\n      color: \"white\",\r\n      borderRadius: \"0.5rem\",\r\n      \":hover\": {\r\n        backgroundColor: \"#2563eb\",\r\n      },\r\n    },\r\n    chatButton: {\r\n      backgroundColor: \"#ef4444\",\r\n      color: \"white\",\r\n      padding: \"0.5rem\",\r\n      borderRadius: \"9999px\",\r\n      boxShadow: \"0 4px 6px rgba(0, 0, 0, 0.1)\",\r\n      \":hover\": {\r\n        backgroundColor: \"#dc2626\",\r\n      },\r\n    },\r\n    chatbotIcon: {\r\n      width: \"1.5rem\",\r\n      height: \"1.5rem\",\r\n    },\r\n    inputWrapper: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      gap: \"0.5rem\",\r\n      padding: \"0.5rem\",\r\n      borderTop: \"1px solid #e5e7eb\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container as React.CSSProperties}>\r\n      <Toaster position=\"top-right\" />\r\n      {isOpen ? (\r\n        <div style={styles.chatContainer as React.CSSProperties}>\r\n          <div style={styles.header as React.CSSProperties}>\r\n            <button onClick={() => setIsOpen(false)} className=\"close-button\">\r\n              <GiCrossedBones\r\n                style={styles.closeButton as React.CSSProperties}\r\n              />\r\n            </button>\r\n          </div>\r\n\r\n          <div style={styles.messagesContainer as React.CSSProperties}>\r\n            {messages.map((message, index) => (\r\n              <div\r\n                key={index}\r\n                style={styles.messageWrapper(message.role === \"user\")}\r\n              >\r\n                <div style={styles.message(message.role === \"user\")}>\r\n                  {message.content}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            {isLoading && (\r\n              <div style={styles.messageWrapper(false)}>\r\n                <div style={styles.message(false)}>Typing...</div>\r\n              </div>\r\n            )}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          <form\r\n            onSubmit={handleSendMessage}\r\n            style={styles.inputContainer as React.CSSProperties}\r\n          >\r\n            <div style={styles.inputWrapper as React.CSSProperties}>\r\n              <input\r\n                type=\"text\"\r\n                value={inputMessage}\r\n                onChange={(e) => setInputMessage(e.target.value)}\r\n                placeholder=\"Type your message...\"\r\n                style={styles.input as React.CSSProperties}\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n                style={styles.sendButton as React.CSSProperties}\r\n              >\r\n                <IoSendSharp style={styles.sendButton as React.CSSProperties} />\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      ) : (\r\n        <button onClick={() => setIsOpen(true)} className=\"chat-button\">\r\n          <SiChatbot style={styles.chatbotIcon as React.CSSProperties} />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["Capitalize","_ref","str","charAt","toUpperCase","slice","ChatPilotBot","_ref2","apiKey","_ref2$apiUrl","apiUrl","xApiKey","_useState","useState","isOpen","setIsOpen","_useState2","messages","setMessages","_useState3","inputMessage","setInputMessage","_useState4","isLoading","setIsLoading","messagesEndRef","useRef","useEffect","_messagesEndRef$curre","current","scrollIntoView","behavior","styles","container","position","bottom","right","zIndex","chatContainer","maxWidth","maxHeight","backgroundColor","borderRadius","boxShadow","overflow","header","display","alignItems","justifyContent","padding","closeButton","cursor","transition","transform","messagesContainer","height","overflowY","messageWrapper","isUser","marginBottom","message","color","noMessages","textAlign","inputContainer","gap","borderTop","input","flexGrow","border","outline","borderColor","sendButton","chatButton","chatbotIcon","width","inputWrapper","React","createElement","style","Toaster","onClick","className","GiCrossedBones","map","index","key","role","content","ref","onSubmit","e","preventDefault","trim","concat","Promise","resolve","fetch","method","headers","body","JSON","stringify","queryText","then","response","ok","Error","json","data","prev","payload","_catch","toast","error","_finallyRethrows","_wasThrown","_result","reject","type","value","onChange","target","placeholder","disabled","IoSendSharp","SiChatbot"],"mappings":"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"}